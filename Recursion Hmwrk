Task 1

from typing import Optional

def to_power(x: Optional[int, float], exp: int) -> Optional[int, float]:

    """

    Returns  x ^ exp

    >>> to_power(2, 3) == 8

    True

    >>> to_power(3.5, 2) == 12.25

    True

    >>> to_power(2, -1)

    ValueError: This function works only with exp > 0.

    """

    pass

    
    from typing import Optional

def to_power(x: Optional[int, float], exp: int) -> Optional[int, float]:
    if exp == 0:
        return 1
    elif exp == 1:
        return x
    elif exp > 1:
        return x * to_power(x, exp - 1)
    else:
        raise ValueError("This function works only with exp > 0.")
        

assert to_power(2, 3) == 8
assert to_power(3.5, 2) == 12.25
try:
    to_power(2, -1)
except ValueError as e:
    assert str(e) == "This function works only with exp > 0."
    
Task 2

from typing import Optional

def is_palindrome(looking_str: str, index: int = 0) -> bool:

    """

    Checks if input string is Palindrome

    >>> is_palindrome('mom')

    True

    >>> is_palindrome('sassas')

    True

    >>> is_palindrome('o')

    True

    """

    pass    


from typing import Optional

def is_palindrome(looking_str: str, index: int = 0) -> bool:
    if len(looking_str) <= 1:
        return True
    elif looking_str[0] != looking_str[-1]:
        return False
    else:
        return is_palindrome(looking_str[1:-1])


assert is_palindrome('mom') == True
assert is_palindrome('sassas') == True
assert is_palindrome('o') == True
assert is_palindrome('river') == False

Task 3

from typing import Optional

def mult(a: int, n: int) -> int:

    """

    This function works only with positive integers

    >>> mult(2, 4) == 8

    True

    >>> mult(2, 0) == 0

    True

    >>> mult(2, -4)

    ValueError("This function works only with postive integers")

    """
    
from typing import Optional

def mult(a: int, n: int) -> int:
    if n < 0:
        raise ValueError("This function works only with postive integers")
    elif n == 0:
        return 0
    else:
        return a + mult(a, n-1)

assert mult(2, 4) == 8
assert mult(2, 0) == 0
try:
    mult(2, -4)
except ValueError as e:
    assert str(e) == "This function works only with postive integers"

Task 4

def reverse(input_str: str) -> str:

    """

    Function returns reversed input string

    >>> reverse("hello") == "olleh"

    True

    >>> reverse("o") == "o"

    True

    """

assert reverse("hello") == "olleh"
assert reverse("o") == "o"


